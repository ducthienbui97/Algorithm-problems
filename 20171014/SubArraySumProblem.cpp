#include <bits/stdc++.h>
using namespace std;
typedef vector<long long> v1;
typedef vector<v1> v2;
typedef vector<v2> v3;
typedef vector<v3> v4;
typedef vector<v4> v5;
int d;
int dim[5];
void solve1() {
    v1 v(dim[0] + 1,0);
    for(int i = 1; i <= dim[0]; i++) {
        cin >> v[i];
        v[i] += v[i - 1];
    }
    int q;
    cin >> q;
    for(int i = 0; i < q; i++) {
        int l,r;
        cin >> l >> r;
        cout << v[r] - v[l-1] <<endl;
    }
}
void solve2() {
    v2 v(dim[0] + 1,v1(dim[1] + 1, 0));
    for(int i1 = 1; i1 <= dim[0]; i1++)
        for(int i2 = 1; i2 <= dim[1]; i2++) {
            cin >> v[i1][i2];
            v[i1][i2] += v[i1 - 1][i2] + v[i1][i2 - 1] - v[i1 - 1][i2 - 1];
        }
    int q;
    cin >> q;
    for(int i = 0; i < q; i++) {
        int l_1,l_2,r_1,r_2;
        cin >> l_1 >> l_2;
        cin >> r_1 >> r_2;
        cout << v[r_1][r_2] - v[l_1 - 1][r_2] - v[r_1][l_2 - 1] + v[l_1-1][l_2 -1] <<endl;
    }
}
void solve3() {
    v3 v(dim[0] + 1,v2(dim[1] + 1, v1(dim[2] + 1, 0)));
    for(int i1 = 1; i1 <= dim[0]; i1++)
        for(int i2 = 1; i2 <= dim[1]; i2++)
            for(int i3 = 1; i3 <= dim[2]; i3++) {
                cin >> v[i1][i2][i3];
                v[i1][i2][i3] += (v[i1 - 1][i2][i3] + v[i1][i2 - 1][i3] + v[i1][i2][i3 -1]) -
                                 (v[i1 - 1][i2 - 1][i3] + v[i1 - 1][i2][i3 -1] + v[i1][i2 - 1][i3 -1]) +
                                 v[i1 - 1][i2 - 1][i3 - 1];
            }
    int q;
    cin >> q;
    for(int i = 0; i < q; i++) {
        int l[3];
        int r[3];
        cin >> l[0] >> l[1] >> l[2];
        cin >> r[0] >> r[1] >> r[2];
        cout << v[r[0]][r[1]][r[2]] - (v[l[0] - 1][r[1]][r[2]] + v[r[0]][l[1] - 1][r[2]] + v[r[0]][r[1]][l[2] -1]) +
             (v[l[0] - 1][l[1] - 1][r[2]] + v[l[0] - 1][r[1]][l[2] - 1] + v[r[0]][l[1] - 1][l[2] -1]) -
             v[l[0] - 1][l[1] - 1][l[2] - 1] << endl;
    }
}
void solve4() {
    v4 v(dim[0] + 1,v3(dim[1] + 1, v2(dim[2] + 1, v1(dim[3] + 1,0))));
    for(int i1 = 1; i1 <= dim[0]; i1++)
        for(int i2 = 1; i2 <= dim[1]; i2++)
            for(int i3 = 1; i3 <= dim[2]; i3++)
                for(int i4 = 1; i4 <= dim[3]; i4++) {
                    cin >> v[i1][i2][i3][i4];
                    v[i1][i2][i3][i4]+= (v[i1 - 1][i2][i3][i4] + v[i1][i2 - 1][i3][i4] + v[i1][i2][i3 -1][i4] + v[i1][i2][i3][i4 - 1]) -
                                        (v[i1 - 1][i2 - 1][i3][i4] + v[i1 - 1][i2][i3 - 1][i4] + v[i1][i2 - 1][i3 -1][i4]
                                         +v[i1 - 1][i2][i3][i4 - 1] + v[i1][i2 - 1][i3][i4 - 1] + v[i1][i2][i3 -1][i4 - 1]) +
                                        (v[i1 - 1][i2 - 1][i3 - 1][i4] + v[i1 - 1][i2][i3 - 1][i4 - 1] + v[i1][i2 - 1][i3 -1][i4 - 1]
                                         +v[i1 - 1][i2 - 1][i3][i4 - 1]) -
                                        v[i1 - 1][i2 - 1][i3 - 1][i4 -1];
                }
    int q;
    cin >> q;
    for(int i = 0; i < q; i++) {
        int l[4];
        int r[4];
        cin >> l[0] >> l[1] >> l[2] >> l[3];
        cin >> r[0] >> r[1] >> r[2] >> r[3];
        cout << v[r[0]][r[1]][r[2]][r[3]] - (v[l[0] - 1][r[1]][r[2]][r[3]] + v[r[0]][l[1] - 1][r[2]][r[3]] + v[r[0]][r[1]][l[2] - 1][r[3]] + v[r[0]][r[1]][r[2]][l[3] - 1]) +
             (v[l[0] - 1][l[1] - 1][r[2]][r[3]] + v[l[0] - 1][r[1]][l[2] - 1][r[3]] + v[r[0]][l[1] - 1][l[2] - 1][r[3]]
              +v[l[0] - 1][r[1]][r[2]][l[3] - 1] + v[r[0]][l[1] - 1][r[2]][l[3] - 1] + v[r[0]][r[1]][l[2] - 1][l[3] - 1]) -
             (v[l[0] - 1][l[1] - 1][l[2] -1][r[3]] + v[l[0] - 1][r[1]][l[2] -1][l[3] - 1] + v[r[0]][l[1] - 1][l[2] - 1][l[3] - 1]
              +v[l[0] - 1][l[1] - 1][r[2]][l[3] - 1]) +
             v[l[0] - 1][l[1] - 1][l[2] -1][l[3] - 1] << endl;
    }
}
void solve5() {
    v5 v(dim[0] + 1,v4(dim[1] + 1, v3(dim[2] + 1, v2(dim[3] + 1,v1(dim[4] + 1,0)))));
    for(int i1 = 1; i1 <= dim[0]; i1++)
        for(int i2 = 1; i2 <= dim[1]; i2++)
            for(int i3 = 1; i3 <= dim[2]; i3++)
                for(int i4 = 1; i4 <= dim[3]; i4++)
                    for(int i5 = 1; i5 <= dim[4]; i5++) {
                        cin >> v[i1][i2][i3][i4][i5];
                        v[i1][i2][i3][i4][i5] += (v[i1 - 1][i2][i3][i4][i5] + v[i1][i2 - 1][i3][i4][i5]
                                                  + v[i1][i2][i3 -1][i4][i5] + v[i1][i2][i3][i4 - 1][i5] + v[i1][i2][i3][i4][i5 - 1]) -
                                                 (v[i1 - 1][i2 - 1][i3][i4][i5] + v[i1 - 1][i2][i3 - 1][i4][i5] + v[i1][i2 - 1][i3 -1][i4][i5]
                                                  + v[i1 - 1][i2][i3][i4 - 1][i5] + v[i1][i2 - 1][i3][i4 - 1][i5] + v[i1][i2][i3 - 1][i4 - 1][i5]
                                                  + v[i1 - 1][i2][i3][i4][i5 - 1] + v[i1][i2 - 1][i3][i4][i5 - 1] + v[i1][i2][i3 - 1][i4][i5 - 1]
                                                  + v[i1][i2][i3][i4 - 1][i5 - 1]) +
                                                 (v[i1 - 1][i2 - 1][i3 - 1][i4][i5] + v[i1 - 1][i2 - 1][i3][i4 - 1][i5] + v[i1 - 1][i2 - 1][i3][i4][i5 - 1]
                                                  + v[i1 - 1][i2][i3 - 1][i4 - 1][i5] + v[i1 - 1][i2][i3 - 1][i4][i5 - 1] + v[i1 - 1][i2][i3][i4 - 1][i5 - 1]
                                                  + v[i1][i2 - 1][i3 - 1][i4 - 1][i5] + v[i1][i2 - 1][i3 - 1][i4][i5 - 1] + v[i1][i2 - 1][i3][i4 - 1][i5 - 1]
                                                  + v[i1][i2][i3 - 1][i4 - 1][i5 - 1]) -
                                                 (v[i1 - 1][i2 - 1][i3 - 1][i4 - 1][i5] + v[i1 - 1][i2 - 1][i3 - 1][i4][i5 - 1]
                                                  + v[i1 - 1][i2 - 1][i3][i4 - 1][i5 - 1] + v[i1 - 1][i2][i3 - 1][i4 - 1][i5 - 1] + v[i1][i2 - 1][i3 - 1][i4 - 1][i5 - 1]) +
                                                 v[i1 - 1][i2 - 1][i3 - 1][i4 -1][i5 - 1];
                    }
    int q;
    cin >> q;
    for(int i = 0; i < q; i++) {
        int l[5];
        int r[5];
        cin >> l[0] >> l[1] >> l[2] >> l[3] >> l[4];
        cin >> r[0] >> r[1] >> r[2] >> r[3] >> r[4];
        cout << v[r[0]][r[1]][r[2]][r[3]][r[4]] - (v[l[0] - 1][r[1]][r[2]][r[3]][r[4]] + v[r[0]][l[1] - 1][r[2]][r[3]][r[4]]
                            + v[r[0]][r[1]][l[2] -1][r[3]][r[4]] + v[r[0]][r[1]][r[2]][l[3] - 1][r[4]] + v[r[0]][r[1]][r[2]][r[3]][l[4] - 1]) +
                            (v[l[0] - 1][l[1] - 1][r[2]][r[3]][r[4]] + v[l[0] - 1][r[1]][l[2] - 1][r[3]][r[4]] + v[r[0]][l[1] - 1][l[2] -1][r[3]][r[4]]
                            + v[l[0] - 1][r[1]][r[2]][l[3] - 1][r[4]] + v[r[0]][l[1] - 1][r[2]][l[3] - 1][r[4]] + v[r[0]][r[1]][l[2] - 1][l[3] - 1][r[4]]
                            + v[l[0] - 1][r[1]][r[2]][r[3]][l[4] - 1] + v[r[0]][l[1] - 1][r[2]][r[3]][l[4] - 1] + v[r[0]][r[1]][l[2] - 1][r[3]][l[4] - 1]
                            + v[r[0]][r[1]][r[2]][l[3] - 1][l[4] - 1]) -
                            (v[l[0] - 1][l[1] - 1][l[2] - 1][r[3]][r[4]] + v[l[0] - 1][l[1] - 1][r[2]][l[3] - 1][r[4]] + v[l[0] - 1][l[1] - 1][r[2]][r[3]][l[4] - 1]
                            + v[l[0] - 1][r[1]][l[2] - 1][l[3] - 1][r[4]] + v[l[0] - 1][r[1]][l[2] - 1][r[3]][l[4] - 1] + v[l[0] - 1][r[1]][r[2]][l[3] - 1][l[4] - 1]
                            + v[r[0]][l[1] - 1][l[2] - 1][l[3] - 1][r[4]] + v[r[0]][l[1] - 1][l[2] - 1][r[3]][l[4] - 1] + v[r[0]][l[1] - 1][r[2]][l[3] - 1][l[4] - 1]
                            + v[r[0]][r[1]][l[2] - 1][l[3] - 1][l[4] - 1]) +
                            (v[l[0] - 1][l[1] - 1][l[2] - 1][l[3] - 1][r[4]] + v[l[0] - 1][l[1] - 1][l[2] - 1][r[3]][l[4] - 1]
                            + v[l[0] - 1][l[1] - 1][r[2]][l[3] - 1][l[4] - 1] + v[l[0] - 1][r[1]][l[2] - 1][l[3] - 1][l[4] - 1] + v[r[0]][l[1] - 1][l[2] - 1][l[3] - 1][l[4] - 1]) -
                            v[l[0] - 1][l[1] - 1][l[2] - 1][l[3] -1][l[4] - 1] << endl;
    }
}
int main() {
    ios_base::sync_with_stdio(false);
    cin >> d;
    for(int i = 0; i < d; i++) {
        cin >> dim[i];
    }
    switch(d) {
    case 1:
        solve1();
        break;
    case 2:
        solve2();
        break;
    case 3:
        solve3();
        break;
    case 4:
        solve4();
        break;
    case 5:
        solve5();
        break;
    }
    return 0;
}

